
application {

  local {
      config{
          first = true
          first = ${?AKKA_CLUSTER_FIRST_NODE}
          actorSystemName = "ActorSystem"
          actorSystemName = ${?ACTOR_SYSTEM_NAME}

          usingKubernetes = true
          usingKubernetes = ${?USING_KUBERNETES}
          usingKafka = true
          usingKafka = ${?USING_KAFKA}
          usingClustering = true
          usingClustering = ${?USING_CLUSTERING}
          usingProjections = true
          usingProjections = ${?USING_PROJECTIONS}
          usingEntityServices = true
          usingEntityServices = ${?USING_ENTITY_SERVICES}
          consumersDelay = "30 seconds"
          consumersDelay = ${?KAFKA_CONSUMERS_DELAY}
      }
  }

  service{
      requestToActorsTimeout = "10 seconds"
      requestToActorsTimeout = ${?SERVICES_REQUEST_TO_ACTORS_TIMEOUT}
  }

  ports{
    grpc{
      port = 8080
      port = ${?GRPC_PORT}
      managmentPort = 9081
      managmentPort = ${?GRPC_MANAGMENT_PORT}
      hardTerminationDeadline = "10 seconds"
    }
  }

  integrations{
    kafka{
      bootstrapServers = "localhost:19092"
      bootstrapServers = ${?KAFKA_BOOTSTRAP_SERVERS}
      schemaRegistryUrl = "http://localhost:18081"
      schemaRegistryUrl = ${?KAFKA_SCHEMA_REGISTRY_URL}
      autoRegisterSchemas = "false"
      autoRegisterSchemas = ${?KAFKA_AUTO_REGISTER_SCHEMAS}
      valueSubjectNameStrategy = "registry.strategy.RecordSubjectStrategy"

      consumers{
        groupId = "group01"
        groupId = ${?KAFKA_CONSUMER_GROUP_ID}
      }
      producers{
      }
    }
  }

  wallet {
        conf{
          snapshotNumberOfEvents = 100000
          snapshotNumberOfEvents = ${?WALLET_ENTITY_SNAPSHOT_NUMBER_OF_EVENTS}
          snapshotKeepNsnapshots = 20
          snapshotKeepNsnapshots = ${?WALLET_ENTITY_SNAPSHOT_KEEP_N_SNAPSHOTS}
          restartMinBackoff = "10 seconds"
          restartMinBackoff = ${?WALLET_ENTITY_RESTART_MIN_BACKOFF}
          restartMaxBackoff = "60 seconds"
          restartMaxBackoff = ${?WALLET_ENTITY_RESTART_MAX_BACKOFF}
          restartRandomFactor = 0.1
          restartRandomFactor = ${?WALLET_ENTITY_RESTART_RANDOM_FACTOR}
        }
        createUpdateProjection{
          groupAfterEnvelopes = 100
          groupAfterEnvelopes = ${?WALLET_ENTITY_CREATE_UPDATE_PROJECTION_GROUP_AFTER_ENVELOPES}
          groupAfterDuration  = "2 seconds"
          groupAfterDuration  = ${?WALLET_ENTITY_CREATE_UPDATE_PROJECTION_GROUP_AFTER_DURATION}
        }
    }

  }
